
# Sample configuration for local execution of woken

akka {
  loglevel = DEBUG
  stdout-loglevel = WARNING

  # a nice way to prevent cold start of extension is to define it to be loaded on actor system start
  # extensions += "com.github.levkhomich.akka.tracing.TracingExtension"

  tracing {
    # use this option to disable tracing
    #    enabled = off

    # zipkin collector or scribe host name
    host = "zipkin"

    # collector's port
    #    port = 9410 # default, can be omitted

    # every n'th message should be traced
    # for example, 1 means that every message would be traced, 2 - half of messages, 4 - a fourth part, etc.
    sample-rate = 1
  }

  remote {
    log-sent-messages = off
    log-received-messages = off
    log-remote-lifecycle-events = off

    maximum-payload-bytes = 10000000 bytes

    netty.tcp {
      hostname = ${clustering.ip} # external (logical) hostname
      port = ${clustering.port}   # external (logical) port

      bind.hostname = 0.0.0.0         # internal (bind) hostname
      bind.port = ${clustering.port}  # internal (bind) port
    }

    artery {
      enabled = off
      canonical.hostname = ${clustering.ip} # external (logical) hostname
      canonical.port = ${clustering.port}   # external (logical) port

      bind.hostname = 0.0.0.0         # internal (bind) hostname
      bind.port = ${clustering.port}  # internal (bind) port

      advanced.aeron-dir = "/dev/shm/woken"
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}
    ]

    roles = ["woken"]

    role {
      woken.min-nr-of-members = 1
      # Not validation or scoring
    }

    client {
      initial-contacts = ["akka.tcp://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}"/system/receptionist"]
    }

  }
}

app {
  clusterSystemName = ${clustering.cluster.name}
  jobServiceName = "job-service"
  dockerBridgeNetwork = "tests_default"
  networkInterface = "0.0.0.0"
  webServicesPort = 8087
  webServicesHttps = off
  disableWorkers = on

  master.router {
    actors {
      mining.limit = 10
      experiment.limit = 10
    }
  }

  basicAuth {
    user = "admin"
    password = "WoKeN"
  }
}

jobs {
  node = "federation"
  owner = "admin@mip.chuv.ch"
  chronosServerUrl = "http://chronos:4400"
  featuresDb = "features"
  featuresTable = "cde_features_c"
  resultDb = "woken"
  metaDb = "metadata"
}

db {
  woken {
    jdbc_driver = "org.postgresql.Driver"
    jdbc_url    = "jdbc:postgresql://db:5432/woken"
    host = "db"
    port = 5432
    user = "postgres"
    password = "test"
  }

  features {
    jdbc_driver = "org.postgresql.Driver"
    jdbc_url    = "jdbc:postgresql://db:5432/features"
    host = "db"
    port = 5432
    user = "postgres"
    password = "test"
  }

  metadata {
    jdbc_driver = "org.postgresql.Driver"
    jdbc_url    = "jdbc:postgresql://db:5432/meta"
    host = "db"
    port = 5432
    user = "postgres"
    password = "test"
  }

}

datasets {

  node1 {
    label = "Node1"
    description = "Node1"
    anonymisationLevel = "Depersonalised"
    location {
      url = "http://wokennode1:8087"
      basicAuth {
        user = "admin"
        password = "WoKeN"
      }
    }
  }

  node2 {
    label = "Node2"
    description = "Node2"
    anonymisationLevel = "Depersonalised"
    location {
      url = "http://wokennode2:8087"
      basicAuth {
        user = "admin"
        password = "WoKeN"
      }
    }
  }

  node1ws {
    label = "Node1Ws"
    description = "Node1Ws"
    anonymisationLevel = "Depersonalised"
    location {
      url = "ws://wokennode1:8087"
      basicAuth {
        user = "admin"
        password = "WoKeN"
      }
    }
  }

  node2ws {
    label = "Node2Ws"
    description = "Node2Ws"
    anonymisationLevel = "Depersonalised"
    location {
      url = "ws://wokennode2:8087"
      basicAuth {
        user = "admin"
        password = "WoKeN"
      }
    }
  }

}
